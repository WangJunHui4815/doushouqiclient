{"version":3,"sources":["Net.js"],"names":["window","io","require","Global","cc","Class","extends","Component","statics","ip","sio","isPinging","fnDisconnect","handlers","connect","fnConnect","fnError","self","opts","on","data","connected","console","log","close","key","value","startHearbeat","lastRecieveTime","Date","now","setInterval","ping","send","event","JSON","stringify","emit","disconnect","addHandler","fn","handler","parse"],"mappings":"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","file":"Net.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\sprite\\Net","sourcesContent":["if (window.io == null) {\r\n    window.io = require(\"socket-io\");\r\n}\r\n\r\nvar Global = cc.Class({\r\n    extends: cc.Component,\r\n    statics: {\r\n        ip: \"\",\r\n        sio: null,\r\n        isPinging: false,\r\n        fnDisconnect: null,\r\n        handlers: {},\r\n\r\n        connect: function (fnConnect, fnError) {\r\n            const self = this;\r\n\r\n            var opts = {\r\n                'reconnection': false,\r\n                'force new connection': true,\r\n                'transports': ['websocket', 'polling']\r\n            }\r\n            this.sio = window.io.connect(this.ip, opts);\r\n\r\n            this.sio.on('connect', function (data) {\r\n                self.sio.connected = true;\r\n                fnConnect(data);\r\n            });\r\n            this.sio.on('disconnect', function (data) {\r\n                console.log(\"disconnect\");\r\n                self.sio.connected = false;\r\n                self.close();\r\n            });\r\n            this.sio.on('reconnect', function () {\r\n                console.log('reconnection');\r\n            });\r\n            this.sio.on('connect_failed', function () {\r\n                console.log('connect_failed');\r\n                fnError()\r\n            });\r\n\r\n            for (var key in this.handlers) {\r\n                var value = this.handlers[key];\r\n                if (typeof (value) == \"function\") {\r\n                    if (key == 'disconnect') {\r\n                        this.fnDisconnect = value;\r\n                    }\r\n                    else {\r\n                        this.sio.on(key, value);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.startHearbeat();\r\n        },\r\n\r\n        startHearbeat: function () {\r\n            this.sio.on('game_pong', function () {\r\n                console.log('game_pong');\r\n                self.lastRecieveTime = Date.now();\r\n            });\r\n            this.lastRecieveTime = Date.now();\r\n            var self = this;\r\n            console.log(1);\r\n            if (!self.isPinging) {\r\n                console.log(2);\r\n                self.isPinging = true;\r\n                setInterval(function () {\r\n                    console.log(3);\r\n                    if (self.sio) {\r\n                        console.log(4);\r\n                        if (Date.now() - self.lastRecieveTime > 10000) {\r\n                            self.close();\r\n                        }\r\n                        else {\r\n                            self.ping();\r\n                        }\r\n                    }\r\n                }, 5000);\r\n            }\r\n        },\r\n\r\n        ping: function () {\r\n            this.send('game_ping');\r\n        },\r\n\r\n        send: function (event, data) {\r\n            if (this.sio.connected) {\r\n                if (data != null && (typeof (data) == \"object\")) {\r\n                    data = JSON.stringify(data);\r\n                    //console.log(data);              \r\n                }\r\n                this.sio.emit(event, data);\r\n            }\r\n        },\r\n        \r\n        close: function () {\r\n            console.log('close');\r\n            if (this.sio && this.sio.connected) {\r\n                this.sio.connected = false;\r\n                this.sio.disconnect();\r\n                this.sio = null;\r\n            }\r\n            if (this.fnDisconnect) {\r\n                this.fnDisconnect();\r\n                this.fnDisconnect = null;\r\n            }\r\n        },\r\n        \r\n        addHandler: function (event, fn) {\r\n            if (this.handlers[event]) {\r\n                console.log(\"event:\" + event + \"' handler has been registered.\");\r\n                return;\r\n            }\r\n\r\n            var handler = function (data) {\r\n                //console.log(event + \"(\" + typeof(data) + \"):\" + (data? data.toString():\"null\"));\r\n                if (event != \"disconnect\" && typeof (data) == \"string\") {\r\n                    data = JSON.parse(data);\r\n                }\r\n                fn(data);\r\n            };\r\n\r\n            this.handlers[event] = handler;\r\n            if (this.sio) {\r\n                // console.log(\"register:function \" + event);\r\n                this.sio.on(event, handler);\r\n            }\r\n        },\r\n    }\r\n});"]}